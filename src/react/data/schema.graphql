"""An object with an ID."""
interface Account implements Node {
  id: ID!
}

"""Attributes for creating or updating a profile vehicle"""
input AdditionalVehicleInput {
  """Vehicle VIN"""
  vin: String!
}

type AffirmationStatement {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!

  """Required statement to display"""
  statement: String!

  """Title of the required statement to display"""
  title: String!
}

type BillingAmount {
  cents: Int!
  dollars: Int!
  fullPrice: BillingAmountFullPrice!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
}

type BillingAmountFullPrice {
  cents: Int!
  dollars: Float!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
}

enum BillingCycle {
  """Full Term"""
  full_term

  """Monthly"""
  monthly
}

type BindableRate implements Node & Rate {
  checkout(billingCycle: BillingCycle!, selectedQuoteId: ID!): QuoteCheckout
  id: ID!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  quotes: [Quote!]!
}

"""An insurance rate which was calculated"""
union CalculatedRate = BindableRate | StaleRate

type CheckboxFormInput implements FormInput {
  checked: Boolean!

  """Is the input disabled"""
  disabled: Boolean
  label: String

  """The name of the input"""
  name: String!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!

  """Is the input required"""
  required: Boolean
}

"""Autogenerated input type of CompleteProfile"""
input CompleteProfileInput {
  attributes: CompleteProfileInputObject!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  externalId: String!
}

"""Attributes for completing a profile"""
input CompleteProfileInputObject {
  """City where the user lives"""
  addressCity: String

  """Street where the user lives"""
  addressLine1: String

  """Line 2"""
  addressLine2: String

  """User state"""
  addressState: Market

  """Zip code of the user"""
  addressZip: String

  """User's date of birth"""
  dateOfBirth: ISO8601Date
  email: String
  firstName: String

  """User gender"""
  gender: Gender

  """Homeowner status of the primary driver"""
  homeownerStatus: HomeownerStatus
  lastName: String

  """Driver license number"""
  licenseNumber: String

  """Driver license state"""
  licenseState: Market

  """Marital status of the primary driver"""
  maritalStatus: MaritalStatus

  """Phone number of the user"""
  phoneNumber: String

  """Vehicle has anti-theft equipment"""
  vehicleAntiTheftEquipment: Boolean

  """Vehicle make"""
  vehicleMake: String

  """Vehicle model"""
  vehicleModel: String

  """Vehicle VIN"""
  vehicleVin: String

  """Vehicle manufactured year"""
  vehicleYear: Int
}

"""Autogenerated return type of CompleteProfile"""
type CompleteProfilePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  completed: Boolean
  embeddedAccount: Account
  errors: [String!]

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  success: Boolean!
}

type CompletedProfile implements Node & Profile {
  completed: Boolean!
  drivers: [Driver!]!
  form(operation: ProfileFormOperation!): Form
  id: ID!
  mailingAddress: MailingAddress!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  rate: EstimatedRate!
  vehicles: [Vehicle!]!
}

type ConsentedAccount implements Account & Node {
  id: ID!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  profile: Profile!
}

type DateFormInput implements FormInput {
  """Is the input disabled"""
  disabled: Boolean
  label: String
  maxDate: ISO8601Date
  minDate: ISO8601Date

  """The name of the input"""
  name: String!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  placeholder: String

  """Is the input required"""
  required: Boolean
  selectedDate: ISO8601Date
}

"""An object with an ID."""
interface Disclaimer implements Node {
  id: ID!
  name: String!
}

type Driver implements Node {
  firstName: String!
  form(operation: DriverFormOperation!): Form
  id: ID!
  lastName: String!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  pni: Boolean!
}

enum DriverFormOperation {
  EDIT_DRIVER
}

"""Attributes for drivers"""
input DriverInput {
  """Driver accident_prevention_course"""
  accidentPreventionCourse: Boolean

  """Driver active_duty_military"""
  activeDutyMilitary: Boolean

  """Driver date_of_birth"""
  dateOfBirth: ISO8601Date

  """Driver first_name"""
  firstName: String

  """Driver gender"""
  gender: Gender

  """Driver last_name"""
  lastName: String

  """Driver license_number"""
  licenseNumber: String

  """Driver license_state"""
  licenseState: Market

  """Driver marital_status"""
  maritalStatus: MaritalStatus
}

"""Attributes for selecting profile driver vehicles"""
input DriverSelectVehicles {
  driverId: ID!
  secondaryVehicleIds: [ID!]
  vehicleIds: [ID!]!
}

"""Attributes for targeting drivers"""
input DriverTargetInput {
  """ID of the driver to target"""
  driverId: ID!
}

"""Attributes for updating an additional profile vehicle"""
input EditAdditionalVehicleInput {
  additionalVehicleId: ID!
  updates: VehicleInput!
}

"""Attributes for updating a profile driver"""
input EditDriverInput {
  driverId: ID!
  updates: DriverInput!
}

type EstimatedRate implements Node & Rate {
  id: ID!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  quotes: [Quote!]!
}

type Form {
  """Required fields to complete the operation"""
  inputs: [FormInput!]!

  """Connected mutation for the form"""
  mutation: Mutation

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!

  """Suggested title of the form"""
  title: String
}

interface FormInput {
  """Is the input disabled"""
  disabled: Boolean

  """The name of the input"""
  name: String!

  """Is the input required"""
  required: Boolean
}

enum FormMailingAddressOperation {
  UPDATE_MAILING_ADDRESS
}

enum Gender {
  F
  M
  X
}

type GeneratedDisclaimer implements Disclaimer & Node {
  id: ID!
  name: String!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!

  """URL to view the disclaimer file"""
  url: String!
}

type GeneratingDisclaimer implements Disclaimer & Node {
  id: ID!
  name: String!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
}

enum HomeownerStatus {
  other
  own
  rent
}

"""An ISO 8601-encoded date"""
scalar ISO8601Date

type IncompleteProfile implements Node & Profile {
  completed: Boolean!
  drivers: [Driver!]!
  id: ID!
  mailingAddress: MailingAddress!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  rate: EstimatedRate!
  requiredFields(excludeSubmitted: Boolean = false): [FormInput!]
  vehicles: [Vehicle!]!
}

type InputOption {
  label: String!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  value: String!
}

type InsuredProfile implements Node & Profile {
  completed: Boolean!
  drivers: [Driver!]!
  id: ID!
  mailingAddress: MailingAddress!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  vehicles: [Vehicle!]!
}

type MailingAddress implements Node {
  city: String
  form(operation: FormMailingAddressOperation!): Form
  id: ID!
  line1: String
  line2: String

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  state: Market
  zip: Int
}

"""Attributes for a mailing address"""
input MailingAddressInput {
  """Mailing Address address1"""
  address1: String

  """Mailing Address address2"""
  address2: String

  """Mailing Address city"""
  city: String

  """Mailing Address municipality"""
  municipality: String

  """Mailing Address state"""
  state: String

  """Mailing Address zip"""
  zip: String
}

enum MaritalStatus {
  Married
  Single
  Widowed
}

enum Market {
  """Alaska"""
  AK

  """Alabama"""
  AL

  """Arkansas"""
  AR

  """Arizona"""
  AZ

  """California"""
  CA

  """Colorado"""
  CO

  """Connecticut"""
  CT

  """District Of Columbia"""
  DC

  """Delaware"""
  DE

  """Florida"""
  FL

  """Georgia"""
  GA

  """Hawaii"""
  HI

  """Iowa"""
  IA

  """Idaho"""
  ID

  """Illinois"""
  IL

  """Indiana"""
  IN

  """Kansas"""
  KS

  """Kentucky"""
  KY

  """Louisiana"""
  LA

  """Massachusetts"""
  MA

  """Maryland"""
  MD

  """Maine"""
  ME

  """Michigan"""
  MI

  """Minnesota"""
  MN

  """Missouri"""
  MO

  """Mississippi"""
  MS

  """Montana"""
  MT

  """North Carolina"""
  NC

  """North Dakota"""
  ND

  """Nebraska"""
  NE

  """New Hampshire"""
  NH

  """New Jersey"""
  NJ

  """New Mexico"""
  NM

  """Nevada"""
  NV

  """New York"""
  NY

  """Ohio"""
  OH

  """Oklahoma"""
  OK

  """Oregon"""
  OR

  """Pennsylvania"""
  PA

  """Rhode Island"""
  RI

  """South Carolina"""
  SC

  """South Dakota"""
  SD

  """Tennessee"""
  TN

  """Texas"""
  TX

  """Utah"""
  UT

  """Virginia"""
  VA

  """Vermont"""
  VT

  """Washington"""
  WA

  """Wisconsin"""
  WI

  """West Virginia"""
  WV

  """Wyoming"""
  WY
}

type Mutation {
  completeProfile(
    """Parameters for CompleteProfile"""
    input: CompleteProfileInput!
  ): CompleteProfilePayload

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  performProfileOperations(
    """Parameters for PerformProfileOperations"""
    input: PerformProfileOperationsInput!
  ): PerformProfileOperationsPayload
  reportAccountConsent(
    """Parameters for ReportAccountConsent"""
    input: ReportAccountConsentInput!
  ): ReportAccountConsentPayload
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

type NumberFormInput implements FormInput {
  description: String

  """Is the input disabled"""
  disabled: Boolean
  label: String
  maxValue: Int
  minValue: Int

  """The name of the input"""
  name: String!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  placeholder: String

  """Is the input required"""
  required: Boolean
  value: Int
}

"""Autogenerated input type of PerformProfileOperations"""
input PerformProfileOperationsInput {
  attemptQuote: Boolean!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  externalId: String!
  operations: [ProfileOperation!]!
}

"""Autogenerated return type of PerformProfileOperations"""
type PerformProfileOperationsPayload {
  account: Account

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  success: Boolean!
}

type PolicyholderAccount implements Account & Node {
  id: ID!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  profile: InsuredProfile!
}

"""An object with an ID."""
interface Profile implements Node {
  completed: Boolean!
  drivers: [Driver!]!
  id: ID!
  mailingAddress: MailingAddress!
  vehicles: [Vehicle!]!
}

enum ProfileFormOperation {
  ADD_DRIVER
  ADD_VEHICLE
  UPDATE_PROFILE
}

"""Attributes for a profile"""
input ProfileInput {
  """Profile email"""
  email: String

  """Profile homeowner_status"""
  homeownerStatus: HomeownerStatus

  """Profile phone_number"""
  phoneNumber: String

  """Profile rideshare"""
  rideshare: Boolean
}

input ProfileOperation {
  addAdditionalVehicle: AdditionalVehicleInput
  addDriver: DriverInput
  addVehicle: VehicleInput
  editAdditionalVehicle: EditAdditionalVehicleInput
  editDriver: EditDriverInput
  removeAdditionalVehicle: VehicleTargetInput
  removeDriver: DriverTargetInput
  selectDriverVehicles: DriverSelectVehicles
  selectVehicleDrivers: VehicleSelectDrivers
  updateMailingAddress: MailingAddressInput
  updateProfile: ProfileInput
}

type Query {
  account(externalId: ID!): Account

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  viewer: Account
}

type Quote implements Node {
  billingAmount(billingCycle: BillingCycle!): BillingAmount
  id: ID!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  tier: QuoteTier!
}

type QuoteCheckout {
  affirmationStatement: AffirmationStatement!
  clientPaymentAuthorizationToken: String!
  disclaimers: [Disclaimer!]!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  price: Int!
}

enum QuoteTier {
  """Custom coverage"""
  custom

  """High coverage"""
  high

  """Low coverage"""
  low

  """Matched coverage"""
  rate_call_1_match

  """Recommended tier"""
  recommended

  """Right quote coverage"""
  right_quote

  """State minimum coverage"""
  state_minimum
}

"""An object with an ID."""
interface Rate implements Node {
  id: ID!
  quotes: [Quote!]!
}

type RatedProfile implements Node & Profile {
  completed: Boolean!
  drivers: [Driver!]!
  form(operation: ProfileFormOperation!): Form
  id: ID!
  mailingAddress: MailingAddress!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  quoteCheckout(billingCycle: BillingCycle!, selectedQuoteId: ID!): QuoteCheckout
  rate: CalculatedRate!
  vehicles: [Vehicle!]!
}

"""Autogenerated input type of ReportAccountConsent"""
input ReportAccountConsentInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  externalId: String!
}

"""Autogenerated return type of ReportAccountConsent"""
type ReportAccountConsentPayload {
  account: Account

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  success: Boolean!
}

type SelectFormInput implements FormInput {
  """Is the input disabled"""
  disabled: Boolean
  label: String

  """The name of the input"""
  name: String!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  options: [InputOption!]!
  placeholder: String

  """Is the input required"""
  required: Boolean
  selectedOption: String
}

type StaleRate implements Node & Rate {
  id: ID!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  quotes: [Quote!]!
}

type TextFormInput implements FormInput {
  description: String

  """Is the input disabled"""
  disabled: Boolean
  label: String

  """The name of the input"""
  name: String!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  placeholder: String

  """Is the input required"""
  required: Boolean
  value: String
}

type UnconsentedAccount implements Account & Node {
  id: ID!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
}

type Vehicle implements Node {
  form(operation: VehicleFormOperation!): Form
  id: ID!
  make: String
  model: String

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  shortVin: String
  vin: String
  year: Int
}

enum VehicleFormOperation {
  EDIT_VEHICLE
}

"""Attributes for creating or updating a profile vehicle"""
input VehicleInput {
  """Vehicle annualized_mileage"""
  annualizedMileage: Int

  """Vehicle anti_theft_equipment"""
  antiTheftEquipment: Boolean

  """Vehicle make"""
  make: String

  """Vehicle model"""
  model: String

  """Vehicle primary_usage"""
  primaryUsage: VehiclePrimaryUsage

  """Vehicle purchase_date"""
  purchaseDate: ISO8601Date

  """Vehicle vin"""
  vin: String

  """Vehicle vin_etching"""
  vinEtching: Boolean

  """Vehicle year"""
  year: Int
}

enum VehiclePrimaryUsage {
  """business"""
  business

  """commute"""
  commute

  """farm"""
  farm

  """occasional"""
  occasional

  """pleasure"""
  pleasure

  """rideshare"""
  rideshare

  """work"""
  work
}

"""Attributes for selecting profile vehicle drivers"""
input VehicleSelectDrivers {
  driverIds: [ID!]!
  secondaryDriverIds: [ID!]
  vehicleId: ID!
}

"""Attributes for targeting vehicles"""
input VehicleTargetInput {
  """ID of the vehicle to target"""
  vehicleId: ID!
}